[gd_resource type="ShaderMaterial" load_steps=6 format=2]

[ext_resource path="res://models/images/Untitled.png" type="Texture" id=1]
[ext_resource path="res://models/images/UntitledAB.png" type="Texture" id=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_disabled,ambient_light_disabled, diffuse_burley, specular_schlick_ggx;
//render_mode unshaded;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;



const float IOR_AIR = 1.0;
const float IOR_WATER = 1.333;

uniform sampler2D noise;
uniform float height_scale = 0.5;
uniform float plane_scale = 10.0;
uniform float refraction = 0.05;
uniform vec3 world_light_pos = vec3(43.586, 4.43, 21.44);
uniform float world_ground_height = -1.043;
uniform float water_distance;
uniform int epicenters_to_render = 1;
uniform bool caustics;
uniform bool wave_noise;

varying vec3 oldPos;
varying vec3 newPos;
varying vec2 vertex_position;
varying vec3 refractedLight;

float wave(vec2 position){
  position += texture(noise, position / plane_scale).x * (plane_scale/5.0) - (plane_scale/10.0);
  vec2 wv = 1.0 - abs(sin(position));
  return pow(1.0 - pow(wv.x * wv.y, 0.65), 4.0);
}

float height(vec2 position, float itime) {
	vec2 p2;
	p2.y = -position.y;
	p2.x = position.x;
	float time = itime/2.0;
	float d = 0.0;
	if (wave_noise) {
		d += wave((position + time) * 0.4) * 0.3;
		d += wave((position - time) * 0.3) * 0.3;
		d += wave((p2 + time) * 0.5) * 0.2;
		d += wave((position - time) * 0.6) * 0.2;
	}
	vec2 epicenters[3] = {
		vec2(0.0,0.0),
		vec2(-10.0,0.0),
		vec2(30.0,45.0)
	};
	float amp = .5;
	float damping = 0.05;
	
	for (int i = 0; i < epicenters_to_render; i++) {
		vec2 epicenter = epicenters[i];
		float dist = distance(epicenter,position);
		//float the_wave = pow( 1.0 -pow((1.0-abs(sin(dist-time*5.0))),0.65), 4.0);
		float the_wave = sin(dist-time*5.0);
		d += amp*exp(-dist*damping)*the_wave;
	}
	return d*height_scale;
}
void vertex() {
	if (caustics) {
		vec2 pos = VERTEX.xz;
		float k = height(pos, TIME);
		vec3 caustic_VERTEX = VERTEX;
		caustic_VERTEX.y += k + water_distance;
		vec4 worldPos = vec4(caustic_VERTEX, 1.0) * WORLD_MATRIX;
		oldPos = worldPos.xyz;
		vec3 light_direction = oldPos - world_light_pos;
		vec3 caustic_NORMAL = normalize(vec3(k - height(pos + vec2(0.1, 0.0), TIME), 0.1, k - height(pos + vec2(0.0, 0.1), TIME)));
		refractedLight = refract(light_direction, caustic_NORMAL, IOR_WATER / IOR_AIR);
		vec3 groundNormal = vec3(0.0, -1.0, 0.0);
		vec3 groundPoint = vec3(0.0, world_ground_height, 0.0);
		newPos = vec3(0.0);
		if (dot(light_direction, groundNormal) != 0.0) {
			float d = dot((groundPoint - oldPos), groundNormal);
			newPos = oldPos + light_direction*d;
		}
		VERTEX.xz = newPos.xz;
		UV = newPos.xz*0.01;
	}
}



//void vertex() {
	//UV=UV*uv1_scale.xy+uv1_offset.xy;
//}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	NORMALMAP = texture(texture_normal,base_uv).rgb;
	SPECULAR = specular;
	NORMALMAP_DEPTH = normal_scale;
	//textureProj(s)
	if (caustics) {
		vec3 oPos = (vec4(oldPos, 1.0)).xyz;
		vec3 nPos = (vec4(newPos, 1.0)).xyz;
		float oldArea = length(dFdx(oPos) * length(dFdy(oPos)));
		float newArea = length(dFdx(nPos) * length(dFdy(nPos)));
		//ALPHA  = (vec3(oldArea/newArea * 0.2)).r;
		//EMISSION = vec3(oldArea/newArea * 0.2)*10.0;
		ALBEDO += vec3(oldArea/newArea * 0.2) * 10.0;
	}
	
}
"

[sub_resource type="OpenSimplexNoise" id=2]
octaves = 8
period = 128.0

[sub_resource type="NoiseTexture" id=3]
width = 4096
height = 4096
seamless = true
noise = SubResource( 2 )

[resource]
shader = SubResource( 1 )
shader_param/albedo = Color( 0.192157, 0.117647, 0.0392157, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/normal_scale = 10.0
shader_param/uv1_scale = Vector3( 2.5, 2.5, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/height_scale = 0.6
shader_param/plane_scale = 40.0
shader_param/refraction = 0.05
shader_param/world_light_pos = Vector3( -2.378, 4.43, -4.113 )
shader_param/world_ground_height = -1.043
shader_param/water_distance = 1.102
shader_param/epicenters_to_render = 2
shader_param/caustics = true
shader_param/wave_noise = true
shader_param/texture_albedo = ExtResource( 2 )
shader_param/texture_normal = ExtResource( 1 )
shader_param/noise = SubResource( 3 )
